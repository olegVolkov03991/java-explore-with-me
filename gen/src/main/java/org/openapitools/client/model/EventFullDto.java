/*
 * Main service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.CategoryDto;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.UserShortDto;

/**
 * EventFullDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-11T04:43:55.397025100+03:00[Europe/Moscow]")
public class EventFullDto {
  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private String annotation;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryDto category;

  public static final String SERIALIZED_NAME_CONFIRMED_REQUESTS = "confirmedRequests";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_REQUESTS)
  private Long confirmedRequests;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private String createdOn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private String eventDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private UserShortDto initiator;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_PARTICIPANT_LIMIT = "participantLimit";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_LIMIT)
  private Integer participantLimit = 0;

  public static final String SERIALIZED_NAME_PUBLISHED_ON = "publishedOn";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_ON)
  private String publishedOn;

  public static final String SERIALIZED_NAME_REQUEST_MODERATION = "requestModeration";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODERATION)
  private Boolean requestModeration = true;

  /**
   * Список состояний жизненного цикла события
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("PENDING"),
    
    PUBLISHED("PUBLISHED"),
    
    CANCELED("CANCELED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private Long views;


  public EventFullDto annotation(String annotation) {
    
    this.annotation = annotation;
    return this;
  }

   /**
   * Краткое описание
   * @return annotation
  **/
  @ApiModelProperty(example = "Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории", required = true, value = "Краткое описание")

  public String getAnnotation() {
    return annotation;
  }


  public void setAnnotation(String annotation) {
    this.annotation = annotation;
  }


  public EventFullDto category(CategoryDto category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @ApiModelProperty(required = true, value = "")

  public CategoryDto getCategory() {
    return category;
  }


  public void setCategory(CategoryDto category) {
    this.category = category;
  }


  public EventFullDto confirmedRequests(Long confirmedRequests) {
    
    this.confirmedRequests = confirmedRequests;
    return this;
  }

   /**
   * Количество одобренных заявок на участие в данном событии
   * @return confirmedRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Количество одобренных заявок на участие в данном событии")

  public Long getConfirmedRequests() {
    return confirmedRequests;
  }


  public void setConfirmedRequests(Long confirmedRequests) {
    this.confirmedRequests = confirmedRequests;
  }


  public EventFullDto createdOn(String createdOn) {
    
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Дата и время создания события (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;)
   * @return createdOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-09-06 11:00:23", value = "Дата и время создания события (в формате \"yyyy-MM-dd HH:mm:ss\")")

  public String getCreatedOn() {
    return createdOn;
  }


  public void setCreatedOn(String createdOn) {
    this.createdOn = createdOn;
  }


  public EventFullDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Полное описание события
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Что получится, если соединить кукурузу и полёт? Создатели \"Шоу летающей кукурузы\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...", value = "Полное описание события")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EventFullDto eventDate(String eventDate) {
    
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Дата и время на которые намечено событие (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;)
   * @return eventDate
  **/
  @ApiModelProperty(example = "2024-12-31 15:10:05", required = true, value = "Дата и время на которые намечено событие (в формате \"yyyy-MM-dd HH:mm:ss\")")

  public String getEventDate() {
    return eventDate;
  }


  public void setEventDate(String eventDate) {
    this.eventDate = eventDate;
  }


  public EventFullDto id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Идентификатор
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Идентификатор")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public EventFullDto initiator(UserShortDto initiator) {
    
    this.initiator = initiator;
    return this;
  }

   /**
   * Get initiator
   * @return initiator
  **/
  @ApiModelProperty(required = true, value = "")

  public UserShortDto getInitiator() {
    return initiator;
  }


  public void setInitiator(UserShortDto initiator) {
    this.initiator = initiator;
  }


  public EventFullDto location(Location location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(required = true, value = "")

  public Location getLocation() {
    return location;
  }


  public void setLocation(Location location) {
    this.location = location;
  }


  public EventFullDto paid(Boolean paid) {
    
    this.paid = paid;
    return this;
  }

   /**
   * Нужно ли оплачивать участие
   * @return paid
  **/
  @ApiModelProperty(example = "true", required = true, value = "Нужно ли оплачивать участие")

  public Boolean getPaid() {
    return paid;
  }


  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public EventFullDto participantLimit(Integer participantLimit) {
    
    this.participantLimit = participantLimit;
    return this;
  }

   /**
   * Ограничение на количество участников. Значение 0 - означает отсутствие ограничения
   * @return participantLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Ограничение на количество участников. Значение 0 - означает отсутствие ограничения")

  public Integer getParticipantLimit() {
    return participantLimit;
  }


  public void setParticipantLimit(Integer participantLimit) {
    this.participantLimit = participantLimit;
  }


  public EventFullDto publishedOn(String publishedOn) {
    
    this.publishedOn = publishedOn;
    return this;
  }

   /**
   * Дата и время публикации события (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;)
   * @return publishedOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-09-06 15:10:05", value = "Дата и время публикации события (в формате \"yyyy-MM-dd HH:mm:ss\")")

  public String getPublishedOn() {
    return publishedOn;
  }


  public void setPublishedOn(String publishedOn) {
    this.publishedOn = publishedOn;
  }


  public EventFullDto requestModeration(Boolean requestModeration) {
    
    this.requestModeration = requestModeration;
    return this;
  }

   /**
   * Нужна ли пре-модерация заявок на участие
   * @return requestModeration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Нужна ли пре-модерация заявок на участие")

  public Boolean getRequestModeration() {
    return requestModeration;
  }


  public void setRequestModeration(Boolean requestModeration) {
    this.requestModeration = requestModeration;
  }


  public EventFullDto state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * Список состояний жизненного цикла события
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUBLISHED", value = "Список состояний жизненного цикла события")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  public EventFullDto title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Заголовок
   * @return title
  **/
  @ApiModelProperty(example = "Знаменитое шоу 'Летающая кукуруза'", required = true, value = "Заголовок")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public EventFullDto views(Long views) {
    
    this.views = views;
    return this;
  }

   /**
   * Количество просмотрев события
   * @return views
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "999", value = "Количество просмотрев события")

  public Long getViews() {
    return views;
  }


  public void setViews(Long views) {
    this.views = views;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventFullDto eventFullDto = (EventFullDto) o;
    return Objects.equals(this.annotation, eventFullDto.annotation) &&
        Objects.equals(this.category, eventFullDto.category) &&
        Objects.equals(this.confirmedRequests, eventFullDto.confirmedRequests) &&
        Objects.equals(this.createdOn, eventFullDto.createdOn) &&
        Objects.equals(this.description, eventFullDto.description) &&
        Objects.equals(this.eventDate, eventFullDto.eventDate) &&
        Objects.equals(this.id, eventFullDto.id) &&
        Objects.equals(this.initiator, eventFullDto.initiator) &&
        Objects.equals(this.location, eventFullDto.location) &&
        Objects.equals(this.paid, eventFullDto.paid) &&
        Objects.equals(this.participantLimit, eventFullDto.participantLimit) &&
        Objects.equals(this.publishedOn, eventFullDto.publishedOn) &&
        Objects.equals(this.requestModeration, eventFullDto.requestModeration) &&
        Objects.equals(this.state, eventFullDto.state) &&
        Objects.equals(this.title, eventFullDto.title) &&
        Objects.equals(this.views, eventFullDto.views);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotation, category, confirmedRequests, createdOn, description, eventDate, id, initiator, location, paid, participantLimit, publishedOn, requestModeration, state, title, views);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventFullDto {\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    confirmedRequests: ").append(toIndentedString(confirmedRequests)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    participantLimit: ").append(toIndentedString(participantLimit)).append("\n");
    sb.append("    publishedOn: ").append(toIndentedString(publishedOn)).append("\n");
    sb.append("    requestModeration: ").append(toIndentedString(requestModeration)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

