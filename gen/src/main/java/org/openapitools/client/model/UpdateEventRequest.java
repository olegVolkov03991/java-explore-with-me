/*
 * Main service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Данные для изменения информации о событии
 */
@ApiModel(description = "Данные для изменения информации о событии")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-11T04:43:55.397025100+03:00[Europe/Moscow]")
public class UpdateEventRequest {
  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private String annotation;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Long category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private String eventDate;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Long eventId;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public static final String SERIALIZED_NAME_PARTICIPANT_LIMIT = "participantLimit";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_LIMIT)
  private Integer participantLimit;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;


  public UpdateEventRequest annotation(String annotation) {
    
    this.annotation = annotation;
    return this;
  }

   /**
   * Новая аннотация
   * @return annotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Сап прогулки по рекам и каналам – это возможность увидеть Практикбург с другого ракурса", value = "Новая аннотация")

  public String getAnnotation() {
    return annotation;
  }


  public void setAnnotation(String annotation) {
    this.annotation = annotation;
  }


  public UpdateEventRequest category(Long category) {
    
    this.category = category;
    return this;
  }

   /**
   * Новая категория
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Новая категория")

  public Long getCategory() {
    return category;
  }


  public void setCategory(Long category) {
    this.category = category;
  }


  public UpdateEventRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Новое описание
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "От английского SUP - Stand Up Paddle — \"стоя на доске с веслом\", гавайская разновидность сёрфинга, в котором серфер, стоя на доске, катается на волнах и при этом гребет веслом, а не руками, как в классическом серфинге.", value = "Новое описание")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateEventRequest eventDate(String eventDate) {
    
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Новые дата и время на которые намечено событие. Дата и время указываются в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;
   * @return eventDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-10-11 23:10:05", value = "Новые дата и время на которые намечено событие. Дата и время указываются в формате \"yyyy-MM-dd HH:mm:ss\"")

  public String getEventDate() {
    return eventDate;
  }


  public void setEventDate(String eventDate) {
    this.eventDate = eventDate;
  }


  public UpdateEventRequest eventId(Long eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * Идентификатор события
   * @return eventId
  **/
  @ApiModelProperty(example = "1", required = true, value = "Идентификатор события")

  public Long getEventId() {
    return eventId;
  }


  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }


  public UpdateEventRequest paid(Boolean paid) {
    
    this.paid = paid;
    return this;
  }

   /**
   * Новое значение флага о платности мероприятия
   * @return paid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Новое значение флага о платности мероприятия")

  public Boolean getPaid() {
    return paid;
  }


  public void setPaid(Boolean paid) {
    this.paid = paid;
  }


  public UpdateEventRequest participantLimit(Integer participantLimit) {
    
    this.participantLimit = participantLimit;
    return this;
  }

   /**
   * Новый лимит пользователей
   * @return participantLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7", value = "Новый лимит пользователей")

  public Integer getParticipantLimit() {
    return participantLimit;
  }


  public void setParticipantLimit(Integer participantLimit) {
    this.participantLimit = participantLimit;
  }


  public UpdateEventRequest title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Новый заголовок
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Сап прогулки по рекам и каналам", value = "Новый заголовок")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEventRequest updateEventRequest = (UpdateEventRequest) o;
    return Objects.equals(this.annotation, updateEventRequest.annotation) &&
        Objects.equals(this.category, updateEventRequest.category) &&
        Objects.equals(this.description, updateEventRequest.description) &&
        Objects.equals(this.eventDate, updateEventRequest.eventDate) &&
        Objects.equals(this.eventId, updateEventRequest.eventId) &&
        Objects.equals(this.paid, updateEventRequest.paid) &&
        Objects.equals(this.participantLimit, updateEventRequest.participantLimit) &&
        Objects.equals(this.title, updateEventRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotation, category, description, eventDate, eventId, paid, participantLimit, title);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEventRequest {\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    participantLimit: ").append(toIndentedString(participantLimit)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

