/*
 * Stat service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EndpointHit;
import org.openapitools.client.model.ViewStats;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatsControllerApi {
    private ApiClient localVarApiClient;

    public StatsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getStats
     * @param start Дата и время начала диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param end Дата и время конца диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param uris Список uri для которых нужно выгрузить статистику (optional)
     * @param unique Нужно ли учитывать только уникальные посещения (только с уникальным ip) (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика собрана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsCall(String start, String end, List<String> uris, Boolean unique, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (uris != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "uris", uris));
        }

        if (unique != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unique", unique));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatsValidateBeforeCall(String start, String end, List<String> uris, Boolean unique, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getStats(Async)");
        }
        
        // verify the required parameter 'end' is set
        if (end == null) {
            throw new ApiException("Missing the required parameter 'end' when calling getStats(Async)");
        }
        

        okhttp3.Call localVarCall = getStatsCall(start, end, uris, unique, _callback);
        return localVarCall;

    }

    /**
     * Получение статистики по посещениям. Обратите внимание: значение даты и времени нужно закодировать (например используя java.net.URLEncoder.encode) 
     * 
     * @param start Дата и время начала диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param end Дата и время конца диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param uris Список uri для которых нужно выгрузить статистику (optional)
     * @param unique Нужно ли учитывать только уникальные посещения (только с уникальным ip) (optional, default to false)
     * @return List&lt;ViewStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика собрана </td><td>  -  </td></tr>
     </table>
     */
    public List<ViewStats> getStats(String start, String end, List<String> uris, Boolean unique) throws ApiException {
        ApiResponse<List<ViewStats>> localVarResp = getStatsWithHttpInfo(start, end, uris, unique);
        return localVarResp.getData();
    }

    /**
     * Получение статистики по посещениям. Обратите внимание: значение даты и времени нужно закодировать (например используя java.net.URLEncoder.encode) 
     * 
     * @param start Дата и время начала диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param end Дата и время конца диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param uris Список uri для которых нужно выгрузить статистику (optional)
     * @param unique Нужно ли учитывать только уникальные посещения (только с уникальным ip) (optional, default to false)
     * @return ApiResponse&lt;List&lt;ViewStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика собрана </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ViewStats>> getStatsWithHttpInfo(String start, String end, List<String> uris, Boolean unique) throws ApiException {
        okhttp3.Call localVarCall = getStatsValidateBeforeCall(start, end, uris, unique, null);
        Type localVarReturnType = new TypeToken<List<ViewStats>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение статистики по посещениям. Обратите внимание: значение даты и времени нужно закодировать (например используя java.net.URLEncoder.encode)  (asynchronously)
     * 
     * @param start Дата и время начала диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param end Дата и время конца диапазона за который нужно выгрузить статистику (в формате \&quot;yyyy-MM-dd HH:mm:ss\&quot;) (required)
     * @param uris Список uri для которых нужно выгрузить статистику (optional)
     * @param unique Нужно ли учитывать только уникальные посещения (только с уникальным ip) (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Статистика собрана </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStatsAsync(String start, String end, List<String> uris, Boolean unique, final ApiCallback<List<ViewStats>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatsValidateBeforeCall(start, end, uris, unique, _callback);
        Type localVarReturnType = new TypeToken<List<ViewStats>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hit
     * @param endpointHit данные запроса (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация сохранена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hitCall(EndpointHit endpointHit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointHit;

        // create path and map variables
        String localVarPath = "/hit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hitValidateBeforeCall(EndpointHit endpointHit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpointHit' is set
        if (endpointHit == null) {
            throw new ApiException("Missing the required parameter 'endpointHit' when calling hit(Async)");
        }
        

        okhttp3.Call localVarCall = hitCall(endpointHit, _callback);
        return localVarCall;

    }

    /**
     * Сохранение информации о том, что к эндпоинту был запрос
     * Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса.
     * @param endpointHit данные запроса (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация сохранена </td><td>  -  </td></tr>
     </table>
     */
    public void hit(EndpointHit endpointHit) throws ApiException {
        hitWithHttpInfo(endpointHit);
    }

    /**
     * Сохранение информации о том, что к эндпоинту был запрос
     * Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса.
     * @param endpointHit данные запроса (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация сохранена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hitWithHttpInfo(EndpointHit endpointHit) throws ApiException {
        okhttp3.Call localVarCall = hitValidateBeforeCall(endpointHit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Сохранение информации о том, что к эндпоинту был запрос (asynchronously)
     * Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса.
     * @param endpointHit данные запроса (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация сохранена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hitAsync(EndpointHit endpointHit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hitValidateBeforeCall(endpointHit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
