/*
 * Main service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.EventFullDto;
import org.openapitools.client.model.EventShortDto;
import org.openapitools.client.model.NewEventDto;
import org.openapitools.client.model.ParticipationRequestDto;
import org.openapitools.client.model.UpdateEventRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateApi {
    private ApiClient localVarApiClient;

    public PrivateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addEvent
     * @param userId id текущего пользователя (required)
     * @param newEventDto данные добавляемого события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEventCall(Long userId, NewEventDto newEventDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newEventDto;

        // create path and map variables
        String localVarPath = "/users/{userId}/events"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEventValidateBeforeCall(Long userId, NewEventDto newEventDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addEvent(Async)");
        }
        
        // verify the required parameter 'newEventDto' is set
        if (newEventDto == null) {
            throw new ApiException("Missing the required parameter 'newEventDto' when calling addEvent(Async)");
        }
        

        okhttp3.Call localVarCall = addEventCall(userId, newEventDto, _callback);
        return localVarCall;

    }

    /**
     * Добавление нового события
     * Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента
     * @param userId id текущего пользователя (required)
     * @param newEventDto данные добавляемого события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto addEvent(Long userId, NewEventDto newEventDto) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = addEventWithHttpInfo(userId, newEventDto);
        return localVarResp.getData();
    }

    /**
     * Добавление нового события
     * Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента
     * @param userId id текущего пользователя (required)
     * @param newEventDto данные добавляемого события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> addEventWithHttpInfo(Long userId, NewEventDto newEventDto) throws ApiException {
        okhttp3.Call localVarCall = addEventValidateBeforeCall(userId, newEventDto, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление нового события (asynchronously)
     * Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента
     * @param userId id текущего пользователя (required)
     * @param newEventDto данные добавляемого события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEventAsync(Long userId, NewEventDto newEventDto, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEventValidateBeforeCall(userId, newEventDto, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addParticipationRequest
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Заявка создана </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipationRequestCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/requests"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventId", eventId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addParticipationRequestValidateBeforeCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addParticipationRequest(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling addParticipationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = addParticipationRequestCall(userId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Добавление запроса от текущего пользователя на участие в событии
     * Обратите внимание: - нельзя добавить повторный запрос - инициатор события не может добавить запрос на участие в своём событии - нельзя участвовать в неопубликованном событии - если у события достигнут лимит запросов на участие - необходимо вернуть ошибку - если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return ParticipationRequestDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Заявка создана </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ParticipationRequestDto addParticipationRequest(Long userId, Long eventId) throws ApiException {
        ApiResponse<ParticipationRequestDto> localVarResp = addParticipationRequestWithHttpInfo(userId, eventId);
        return localVarResp.getData();
    }

    /**
     * Добавление запроса от текущего пользователя на участие в событии
     * Обратите внимание: - нельзя добавить повторный запрос - инициатор события не может добавить запрос на участие в своём событии - нельзя участвовать в неопубликованном событии - если у события достигнут лимит запросов на участие - необходимо вернуть ошибку - если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return ApiResponse&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Заявка создана </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipationRequestDto> addParticipationRequestWithHttpInfo(Long userId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = addParticipationRequestValidateBeforeCall(userId, eventId, null);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление запроса от текущего пользователя на участие в событии (asynchronously)
     * Обратите внимание: - нельзя добавить повторный запрос - инициатор события не может добавить запрос на участие в своём событии - нельзя участвовать в неопубликованном событии - если у события достигнут лимит запросов на участие - необходимо вернуть ошибку - если для события отключена пре-модерация запросов на участие, то запрос должен автоматически перейти в состояние подтвержденного
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Заявка создана </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipationRequestAsync(Long userId, Long eventId, final ApiCallback<ParticipationRequestDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addParticipationRequestValidateBeforeCall(userId, eventId, _callback);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelEvent
     * @param userId id текущего пользователя (required)
     * @param eventId id отменяемого события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEventCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events/{eventId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelEventValidateBeforeCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cancelEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling cancelEvent(Async)");
        }
        

        okhttp3.Call localVarCall = cancelEventCall(userId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Отмена события добавленного текущим пользователем.
     * Обратите внимание: Отменить можно только событие в состоянии ожидания модерации.
     * @param userId id текущего пользователя (required)
     * @param eventId id отменяемого события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto cancelEvent(Long userId, Long eventId) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = cancelEventWithHttpInfo(userId, eventId);
        return localVarResp.getData();
    }

    /**
     * Отмена события добавленного текущим пользователем.
     * Обратите внимание: Отменить можно только событие в состоянии ожидания модерации.
     * @param userId id текущего пользователя (required)
     * @param eventId id отменяемого события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> cancelEventWithHttpInfo(Long userId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = cancelEventValidateBeforeCall(userId, eventId, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Отмена события добавленного текущим пользователем. (asynchronously)
     * Обратите внимание: Отменить можно только событие в состоянии ожидания модерации.
     * @param userId id текущего пользователя (required)
     * @param eventId id отменяемого события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelEventAsync(Long userId, Long eventId, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelEventValidateBeforeCall(userId, eventId, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelParticipationRequest
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую отменяет текущий пользователь (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отклонена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelParticipationRequestCall(Long userId, Long eventId, Long reqId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events/{eventId}/requests/{reqId}/reject"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "reqId" + "\\}", localVarApiClient.escapeString(reqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelParticipationRequestValidateBeforeCall(Long userId, Long eventId, Long reqId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cancelParticipationRequest(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling cancelParticipationRequest(Async)");
        }
        
        // verify the required parameter 'reqId' is set
        if (reqId == null) {
            throw new ApiException("Missing the required parameter 'reqId' when calling cancelParticipationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = cancelParticipationRequestCall(userId, eventId, reqId, _callback);
        return localVarCall;

    }

    /**
     * Отклонение чужой заявки на участие в событии текущего пользователя
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую отменяет текущий пользователь (required)
     * @return ParticipationRequestDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отклонена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ParticipationRequestDto cancelParticipationRequest(Long userId, Long eventId, Long reqId) throws ApiException {
        ApiResponse<ParticipationRequestDto> localVarResp = cancelParticipationRequestWithHttpInfo(userId, eventId, reqId);
        return localVarResp.getData();
    }

    /**
     * Отклонение чужой заявки на участие в событии текущего пользователя
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую отменяет текущий пользователь (required)
     * @return ApiResponse&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отклонена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipationRequestDto> cancelParticipationRequestWithHttpInfo(Long userId, Long eventId, Long reqId) throws ApiException {
        okhttp3.Call localVarCall = cancelParticipationRequestValidateBeforeCall(userId, eventId, reqId, null);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Отклонение чужой заявки на участие в событии текущего пользователя (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую отменяет текущий пользователь (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отклонена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelParticipationRequestAsync(Long userId, Long eventId, Long reqId, final ApiCallback<ParticipationRequestDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelParticipationRequestValidateBeforeCall(userId, eventId, reqId, _callback);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelRequest
     * @param userId id текущего пользователя (required)
     * @param requestId id запроса на участие (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отменена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRequestCall(Long userId, Long requestId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/requests/{requestId}/cancel"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "requestId" + "\\}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRequestValidateBeforeCall(Long userId, Long requestId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cancelRequest(Async)");
        }
        
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling cancelRequest(Async)");
        }
        

        okhttp3.Call localVarCall = cancelRequestCall(userId, requestId, _callback);
        return localVarCall;

    }

    /**
     * Отмена своего запроса на участие в событии
     * 
     * @param userId id текущего пользователя (required)
     * @param requestId id запроса на участие (required)
     * @return ParticipationRequestDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отменена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ParticipationRequestDto cancelRequest(Long userId, Long requestId) throws ApiException {
        ApiResponse<ParticipationRequestDto> localVarResp = cancelRequestWithHttpInfo(userId, requestId);
        return localVarResp.getData();
    }

    /**
     * Отмена своего запроса на участие в событии
     * 
     * @param userId id текущего пользователя (required)
     * @param requestId id запроса на участие (required)
     * @return ApiResponse&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отменена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipationRequestDto> cancelRequestWithHttpInfo(Long userId, Long requestId) throws ApiException {
        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(userId, requestId, null);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Отмена своего запроса на участие в событии (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param requestId id запроса на участие (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка отменена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRequestAsync(Long userId, Long requestId, final ApiCallback<ParticipationRequestDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(userId, requestId, _callback);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmParticipationRequest
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую подтверждает текущий пользователь (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка подтверждена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmParticipationRequestCall(Long userId, Long eventId, Long reqId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events/{eventId}/requests/{reqId}/confirm"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()))
            .replaceAll("\\{" + "reqId" + "\\}", localVarApiClient.escapeString(reqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmParticipationRequestValidateBeforeCall(Long userId, Long eventId, Long reqId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling confirmParticipationRequest(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling confirmParticipationRequest(Async)");
        }
        
        // verify the required parameter 'reqId' is set
        if (reqId == null) {
            throw new ApiException("Missing the required parameter 'reqId' when calling confirmParticipationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = confirmParticipationRequestCall(userId, eventId, reqId, _callback);
        return localVarCall;

    }

    /**
     * Подтверждение чужой заявки на участие в событии текущего пользователя
     * Обратите внимание: - если для события лимит заявок равен 0 или отключена пре-модерация заявок, то подтверждение заявок не требуется - нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие - если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую подтверждает текущий пользователь (required)
     * @return ParticipationRequestDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка подтверждена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ParticipationRequestDto confirmParticipationRequest(Long userId, Long eventId, Long reqId) throws ApiException {
        ApiResponse<ParticipationRequestDto> localVarResp = confirmParticipationRequestWithHttpInfo(userId, eventId, reqId);
        return localVarResp.getData();
    }

    /**
     * Подтверждение чужой заявки на участие в событии текущего пользователя
     * Обратите внимание: - если для события лимит заявок равен 0 или отключена пре-модерация заявок, то подтверждение заявок не требуется - нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие - если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую подтверждает текущий пользователь (required)
     * @return ApiResponse&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка подтверждена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipationRequestDto> confirmParticipationRequestWithHttpInfo(Long userId, Long eventId, Long reqId) throws ApiException {
        okhttp3.Call localVarCall = confirmParticipationRequestValidateBeforeCall(userId, eventId, reqId, null);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Подтверждение чужой заявки на участие в событии текущего пользователя (asynchronously)
     * Обратите внимание: - если для события лимит заявок равен 0 или отключена пре-модерация заявок, то подтверждение заявок не требуется - нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие - если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить
     * @param userId id текущего пользователя (required)
     * @param eventId id события текущего пользователя (required)
     * @param reqId id заявки, которую подтверждает текущий пользователь (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Заявка подтверждена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmParticipationRequestAsync(Long userId, Long eventId, Long reqId, final ApiCallback<ParticipationRequestDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmParticipationRequestValidateBeforeCall(userId, eventId, reqId, _callback);
        Type localVarReturnType = new TypeToken<ParticipationRequestDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvent
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events/{eventId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEvent(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEvent(Async)");
        }
        

        okhttp3.Call localVarCall = getEventCall(userId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Получение полной информации о событии добавленном текущим пользователем
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto getEvent(Long userId, Long eventId) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = getEventWithHttpInfo(userId, eventId);
        return localVarResp.getData();
    }

    /**
     * Получение полной информации о событии добавленном текущим пользователем
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> getEventWithHttpInfo(Long userId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(userId, eventId, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение полной информации о событии добавленном текущим пользователем (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventAsync(Long userId, Long eventId, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(userId, eventId, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventParticipants
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventParticipantsCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events/{eventId}/requests"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventParticipantsValidateBeforeCall(Long userId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEventParticipants(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventParticipants(Async)");
        }
        

        okhttp3.Call localVarCall = getEventParticipantsCall(userId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Получение информации о запросах на участие в событии текущего пользователя
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return List&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<ParticipationRequestDto> getEventParticipants(Long userId, Long eventId) throws ApiException {
        ApiResponse<List<ParticipationRequestDto>> localVarResp = getEventParticipantsWithHttpInfo(userId, eventId);
        return localVarResp.getData();
    }

    /**
     * Получение информации о запросах на участие в событии текущего пользователя
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @return ApiResponse&lt;List&lt;ParticipationRequestDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ParticipationRequestDto>> getEventParticipantsWithHttpInfo(Long userId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventParticipantsValidateBeforeCall(userId, eventId, null);
        Type localVarReturnType = new TypeToken<List<ParticipationRequestDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение информации о запросах на участие в событии текущего пользователя (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventParticipantsAsync(Long userId, Long eventId, final ApiCallback<List<ParticipationRequestDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventParticipantsValidateBeforeCall(userId, eventId, _callback);
        Type localVarReturnType = new TypeToken<List<ParticipationRequestDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents
     * @param userId id текущего пользователя (required)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsCall(Long userId, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/events"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(Long userId, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getEventsCall(userId, from, size, _callback);
        return localVarCall;

    }

    /**
     * Получение событий, добавленных текущим пользователем
     * 
     * @param userId id текущего пользователя (required)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return List&lt;EventShortDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<EventShortDto> getEvents(Long userId, Integer from, Integer size) throws ApiException {
        ApiResponse<List<EventShortDto>> localVarResp = getEventsWithHttpInfo(userId, from, size);
        return localVarResp.getData();
    }

    /**
     * Получение событий, добавленных текущим пользователем
     * 
     * @param userId id текущего пользователя (required)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;EventShortDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventShortDto>> getEventsWithHttpInfo(Long userId, Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(userId, from, size, null);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение событий, добавленных текущим пользователем (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsAsync(Long userId, Integer from, Integer size, final ApiCallback<List<EventShortDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(userId, from, size, _callback);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRequests
     * @param userId id текущего пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRequestsCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}/requests"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRequestsValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserRequests(Async)");
        }
        

        okhttp3.Call localVarCall = getUserRequestsCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Получение информации о заявках текущего пользователя на участие в чужих событиях
     * 
     * @param userId id текущего пользователя (required)
     * @return List&lt;ParticipationRequestDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<ParticipationRequestDto> getUserRequests(Long userId) throws ApiException {
        ApiResponse<List<ParticipationRequestDto>> localVarResp = getUserRequestsWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Получение информации о заявках текущего пользователя на участие в чужих событиях
     * 
     * @param userId id текущего пользователя (required)
     * @return ApiResponse&lt;List&lt;ParticipationRequestDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ParticipationRequestDto>> getUserRequestsWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getUserRequestsValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<ParticipationRequestDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение информации о заявках текущего пользователя на участие в чужих событиях (asynchronously)
     * 
     * @param userId id текущего пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены запросы на участие </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRequestsAsync(Long userId, final ApiCallback<List<ParticipationRequestDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRequestsValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<ParticipationRequestDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEvent1
     * @param userId id текущего пользователя (required)
     * @param updateEventRequest Новые данные события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEvent1Call(Long userId, UpdateEventRequest updateEventRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateEventRequest;

        // create path and map variables
        String localVarPath = "/users/{userId}/events"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEvent1ValidateBeforeCall(Long userId, UpdateEventRequest updateEventRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateEvent1(Async)");
        }
        
        // verify the required parameter 'updateEventRequest' is set
        if (updateEventRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEventRequest' when calling updateEvent1(Async)");
        }
        

        okhttp3.Call localVarCall = updateEvent1Call(userId, updateEventRequest, _callback);
        return localVarCall;

    }

    /**
     * Изменение события добавленного текущим пользователем
     * Обратите внимание: - изменить можно только отмененные события или события в состоянии ожидания модерации - если редактируется отменённое событие, то оно автоматически переходит в состояние ожидания модерации - дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента 
     * @param userId id текущего пользователя (required)
     * @param updateEventRequest Новые данные события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto updateEvent1(Long userId, UpdateEventRequest updateEventRequest) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = updateEvent1WithHttpInfo(userId, updateEventRequest);
        return localVarResp.getData();
    }

    /**
     * Изменение события добавленного текущим пользователем
     * Обратите внимание: - изменить можно только отмененные события или события в состоянии ожидания модерации - если редактируется отменённое событие, то оно автоматически переходит в состояние ожидания модерации - дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента 
     * @param userId id текущего пользователя (required)
     * @param updateEventRequest Новые данные события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> updateEvent1WithHttpInfo(Long userId, UpdateEventRequest updateEventRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEvent1ValidateBeforeCall(userId, updateEventRequest, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение события добавленного текущим пользователем (asynchronously)
     * Обратите внимание: - изменить можно только отмененные события или события в состоянии ожидания модерации - если редактируется отменённое событие, то оно автоматически переходит в состояние ожидания модерации - дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента 
     * @param userId id текущего пользователя (required)
     * @param updateEventRequest Новые данные события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие обновлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEvent1Async(Long userId, UpdateEventRequest updateEventRequest, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEvent1ValidateBeforeCall(userId, updateEventRequest, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
