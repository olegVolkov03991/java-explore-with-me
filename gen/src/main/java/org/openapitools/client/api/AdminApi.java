/*
 * Main service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminUpdateEventRequest;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CategoryDto;
import org.openapitools.client.model.CompilationDto;
import org.openapitools.client.model.EventFullDto;
import org.openapitools.client.model.NewCategoryDto;
import org.openapitools.client.model.NewCompilationDto;
import org.openapitools.client.model.NewUserRequest;
import org.openapitools.client.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminApi {
    private ApiClient localVarApiClient;

    public AdminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCategory
     * @param newCategoryDto данные добавляемой категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryCall(NewCategoryDto newCategoryDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newCategoryDto;

        // create path and map variables
        String localVarPath = "/admin/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCategoryValidateBeforeCall(NewCategoryDto newCategoryDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newCategoryDto' is set
        if (newCategoryDto == null) {
            throw new ApiException("Missing the required parameter 'newCategoryDto' when calling addCategory(Async)");
        }
        

        okhttp3.Call localVarCall = addCategoryCall(newCategoryDto, _callback);
        return localVarCall;

    }

    /**
     * Добавление новой категории
     * Обратите внимание: имя категории должно быть уникальным
     * @param newCategoryDto данные добавляемой категории (required)
     * @return CategoryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDto addCategory(NewCategoryDto newCategoryDto) throws ApiException {
        ApiResponse<CategoryDto> localVarResp = addCategoryWithHttpInfo(newCategoryDto);
        return localVarResp.getData();
    }

    /**
     * Добавление новой категории
     * Обратите внимание: имя категории должно быть уникальным
     * @param newCategoryDto данные добавляемой категории (required)
     * @return ApiResponse&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDto> addCategoryWithHttpInfo(NewCategoryDto newCategoryDto) throws ApiException {
        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(newCategoryDto, null);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление новой категории (asynchronously)
     * Обратите внимание: имя категории должно быть уникальным
     * @param newCategoryDto данные добавляемой категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Категория добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCategoryAsync(NewCategoryDto newCategoryDto, final ApiCallback<CategoryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCategoryValidateBeforeCall(newCategoryDto, _callback);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addEventToCompilation
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEventToCompilationCall(Long compId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/compilations/{compId}/events/{eventId}"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEventToCompilationValidateBeforeCall(Long compId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling addEventToCompilation(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling addEventToCompilation(Async)");
        }
        

        okhttp3.Call localVarCall = addEventToCompilationCall(compId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Добавить событие в подборку
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void addEventToCompilation(Long compId, Long eventId) throws ApiException {
        addEventToCompilationWithHttpInfo(compId, eventId);
    }

    /**
     * Добавить событие в подборку
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addEventToCompilationWithHttpInfo(Long compId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = addEventToCompilationValidateBeforeCall(compId, eventId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавить событие в подборку (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addEventToCompilationAsync(Long compId, Long eventId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEventToCompilationValidateBeforeCall(compId, eventId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for delete
     * @param userId id пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь удален </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling delete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Удаление пользователя
     * 
     * @param userId id пользователя (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь удален </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void delete(Long userId) throws ApiException {
        deleteWithHttpInfo(userId);
    }

    /**
     * Удаление пользователя
     * 
     * @param userId id пользователя (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь удален </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление пользователя (asynchronously)
     * 
     * @param userId id пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь удален </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAsync(Long userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCategory
     * @param catId id категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryCall(Long catId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/categories/{catId}"
            .replaceAll("\\{" + "catId" + "\\}", localVarApiClient.escapeString(catId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(Long catId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catId' is set
        if (catId == null) {
            throw new ApiException("Missing the required parameter 'catId' when calling deleteCategory(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCategoryCall(catId, _callback);
        return localVarCall;

    }

    /**
     * Удаление категории
     * Обратите внимание: с категорией не должно быть связано ни одного события.
     * @param catId id категории (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCategory(Long catId) throws ApiException {
        deleteCategoryWithHttpInfo(catId);
    }

    /**
     * Удаление категории
     * Обратите внимание: с категорией не должно быть связано ни одного события.
     * @param catId id категории (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCategoryWithHttpInfo(Long catId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(catId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление категории (asynchronously)
     * Обратите внимание: с категорией не должно быть связано ни одного события.
     * @param catId id категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCategoryAsync(Long catId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(catId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCompilation
     * @param compId id подборки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompilationCall(Long compId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/compilations/{compId}"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompilationValidateBeforeCall(Long compId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling deleteCompilation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCompilationCall(compId, _callback);
        return localVarCall;

    }

    /**
     * Удаление подборки
     * 
     * @param compId id подборки (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCompilation(Long compId) throws ApiException {
        deleteCompilationWithHttpInfo(compId);
    }

    /**
     * Удаление подборки
     * 
     * @param compId id подборки (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCompilationWithHttpInfo(Long compId) throws ApiException {
        okhttp3.Call localVarCall = deleteCompilationValidateBeforeCall(compId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление подборки (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка удалена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompilationAsync(Long compId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompilationValidateBeforeCall(compId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents2
     * @param users список id пользователей, чьи события нужно найти (optional)
     * @param states список состояний в которых находятся искомые события (optional)
     * @param categories список id категорий в которых будет вестись поиск (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvents2Call(List<Long> users, List<String> states, List<Long> categories, String rangeStart, String rangeEnd, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (users != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "users", users));
        }

        if (states != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "states", states));
        }

        if (categories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories", categories));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvents2ValidateBeforeCall(List<Long> users, List<String> states, List<Long> categories, String rangeStart, String rangeEnd, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getEvents2Call(users, states, categories, rangeStart, rangeEnd, from, size, _callback);
        return localVarCall;

    }

    /**
     * Поиск событий
     * Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия
     * @param users список id пользователей, чьи события нужно найти (optional)
     * @param states список состояний в которых находятся искомые события (optional)
     * @param categories список id категорий в которых будет вестись поиск (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return List&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<EventFullDto> getEvents2(List<Long> users, List<String> states, List<Long> categories, String rangeStart, String rangeEnd, Integer from, Integer size) throws ApiException {
        ApiResponse<List<EventFullDto>> localVarResp = getEvents2WithHttpInfo(users, states, categories, rangeStart, rangeEnd, from, size);
        return localVarResp.getData();
    }

    /**
     * Поиск событий
     * Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия
     * @param users список id пользователей, чьи события нужно найти (optional)
     * @param states список состояний в которых находятся искомые события (optional)
     * @param categories список id категорий в которых будет вестись поиск (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;EventFullDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventFullDto>> getEvents2WithHttpInfo(List<Long> users, List<String> states, List<Long> categories, String rangeStart, String rangeEnd, Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getEvents2ValidateBeforeCall(users, states, categories, rangeStart, rangeEnd, from, size, null);
        Type localVarReturnType = new TypeToken<List<EventFullDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Поиск событий (asynchronously)
     * Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия
     * @param users список id пользователей, чьи события нужно найти (optional)
     * @param states список состояний в которых находятся искомые события (optional)
     * @param categories список id категорий в которых будет вестись поиск (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvents2Async(List<Long> users, List<String> states, List<Long> categories, String rangeStart, String rangeEnd, Integer from, Integer size, final ApiCallback<List<EventFullDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvents2ValidateBeforeCall(users, states, categories, rangeStart, rangeEnd, from, size, _callback);
        Type localVarReturnType = new TypeToken<List<EventFullDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param ids id пользователей (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователи найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(List<Long> ids, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(List<Long> ids, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getUsersCall(ids, from, size, _callback);
        return localVarCall;

    }

    /**
     * Получение информации о пользователях
     * Возвращает информацию обо всех пользователях (учитываются параметры ограничения выборки), либо о конкретных (учитываются указанные идентификаторы)
     * @param ids id пользователей (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return List&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователи найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<UserDto> getUsers(List<Long> ids, Integer from, Integer size) throws ApiException {
        ApiResponse<List<UserDto>> localVarResp = getUsersWithHttpInfo(ids, from, size);
        return localVarResp.getData();
    }

    /**
     * Получение информации о пользователях
     * Возвращает информацию обо всех пользователях (учитываются параметры ограничения выборки), либо о конкретных (учитываются указанные идентификаторы)
     * @param ids id пользователей (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;UserDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователи найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserDto>> getUsersWithHttpInfo(List<Long> ids, Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(ids, from, size, null);
        Type localVarReturnType = new TypeToken<List<UserDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение информации о пользователях (asynchronously)
     * Возвращает информацию обо всех пользователях (учитываются параметры ограничения выборки), либо о конкретных (учитываются указанные идентификаторы)
     * @param ids id пользователей (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователи найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(List<Long> ids, Integer from, Integer size, final ApiCallback<List<UserDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(ids, from, size, _callback);
        Type localVarReturnType = new TypeToken<List<UserDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pin
     * @param compId id подборки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка закреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinCall(Long compId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/compilations/{compId}/pin"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinValidateBeforeCall(Long compId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling pin(Async)");
        }
        

        okhttp3.Call localVarCall = pinCall(compId, _callback);
        return localVarCall;

    }

    /**
     * Закрепить подборку на главной странице
     * 
     * @param compId id подборки (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка закреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void pin(Long compId) throws ApiException {
        pinWithHttpInfo(compId);
    }

    /**
     * Закрепить подборку на главной странице
     * 
     * @param compId id подборки (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка закреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pinWithHttpInfo(Long compId) throws ApiException {
        okhttp3.Call localVarCall = pinValidateBeforeCall(compId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Закрепить подборку на главной странице (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка закреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinAsync(Long compId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinValidateBeforeCall(compId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishEvent
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие опубликовано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventCall(Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/events/{eventId}/publish"
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishEventValidateBeforeCall(Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling publishEvent(Async)");
        }
        

        okhttp3.Call localVarCall = publishEventCall(eventId, _callback);
        return localVarCall;

    }

    /**
     * Публикация события
     * Обратите внимание:  - дата начала события должна быть не ранее чем за час от даты публикации. - событие должно быть в состоянии ожидания публикации
     * @param eventId id события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие опубликовано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto publishEvent(Long eventId) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = publishEventWithHttpInfo(eventId);
        return localVarResp.getData();
    }

    /**
     * Публикация события
     * Обратите внимание:  - дата начала события должна быть не ранее чем за час от даты публикации. - событие должно быть в состоянии ожидания публикации
     * @param eventId id события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие опубликовано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> publishEventWithHttpInfo(Long eventId) throws ApiException {
        okhttp3.Call localVarCall = publishEventValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Публикация события (asynchronously)
     * Обратите внимание:  - дата начала события должна быть не ранее чем за час от даты публикации. - событие должно быть в состоянии ожидания публикации
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие опубликовано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishEventAsync(Long eventId, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishEventValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser
     * @param newUserRequest данные добавляемого пользователя (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь зарегистрирован </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserCall(NewUserRequest newUserRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newUserRequest;

        // create path and map variables
        String localVarPath = "/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(NewUserRequest newUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newUserRequest' is set
        if (newUserRequest == null) {
            throw new ApiException("Missing the required parameter 'newUserRequest' when calling registerUser(Async)");
        }
        

        okhttp3.Call localVarCall = registerUserCall(newUserRequest, _callback);
        return localVarCall;

    }

    /**
     * Добавление нового пользователя
     * 
     * @param newUserRequest данные добавляемого пользователя (required)
     * @return UserDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь зарегистрирован </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public UserDto registerUser(NewUserRequest newUserRequest) throws ApiException {
        ApiResponse<UserDto> localVarResp = registerUserWithHttpInfo(newUserRequest);
        return localVarResp.getData();
    }

    /**
     * Добавление нового пользователя
     * 
     * @param newUserRequest данные добавляемого пользователя (required)
     * @return ApiResponse&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь зарегистрирован </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDto> registerUserWithHttpInfo(NewUserRequest newUserRequest) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(newUserRequest, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление нового пользователя (asynchronously)
     * 
     * @param newUserRequest данные добавляемого пользователя (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пользователь зарегистрирован </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserAsync(NewUserRequest newUserRequest, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(newUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectEvent
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отклонено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectEventCall(Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/events/{eventId}/reject"
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectEventValidateBeforeCall(Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling rejectEvent(Async)");
        }
        

        okhttp3.Call localVarCall = rejectEventCall(eventId, _callback);
        return localVarCall;

    }

    /**
     * Отклонение события
     * Обратите внимание: событие не должно быть опубликовано.
     * @param eventId id события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отклонено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto rejectEvent(Long eventId) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = rejectEventWithHttpInfo(eventId);
        return localVarResp.getData();
    }

    /**
     * Отклонение события
     * Обратите внимание: событие не должно быть опубликовано.
     * @param eventId id события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отклонено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> rejectEventWithHttpInfo(Long eventId) throws ApiException {
        okhttp3.Call localVarCall = rejectEventValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Отклонение события (asynchronously)
     * Обратите внимание: событие не должно быть опубликовано.
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отклонено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectEventAsync(Long eventId, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectEventValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeEventFromCompilation
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие удалено из подборки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEventFromCompilationCall(Long compId, Long eventId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/compilations/{compId}/events/{eventId}"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()))
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEventFromCompilationValidateBeforeCall(Long compId, Long eventId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling removeEventFromCompilation(Async)");
        }
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling removeEventFromCompilation(Async)");
        }
        

        okhttp3.Call localVarCall = removeEventFromCompilationCall(compId, eventId, _callback);
        return localVarCall;

    }

    /**
     * Удалить событие из подборки
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие удалено из подборки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void removeEventFromCompilation(Long compId, Long eventId) throws ApiException {
        removeEventFromCompilationWithHttpInfo(compId, eventId);
    }

    /**
     * Удалить событие из подборки
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие удалено из подборки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeEventFromCompilationWithHttpInfo(Long compId, Long eventId) throws ApiException {
        okhttp3.Call localVarCall = removeEventFromCompilationValidateBeforeCall(compId, eventId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удалить событие из подборки (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param eventId id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие удалено из подборки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeEventFromCompilationAsync(Long compId, Long eventId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEventFromCompilationValidateBeforeCall(compId, eventId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveCompilation
     * @param newCompilationDto данные новой подборки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Подборка добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCompilationCall(NewCompilationDto newCompilationDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newCompilationDto;

        // create path and map variables
        String localVarPath = "/admin/compilations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveCompilationValidateBeforeCall(NewCompilationDto newCompilationDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newCompilationDto' is set
        if (newCompilationDto == null) {
            throw new ApiException("Missing the required parameter 'newCompilationDto' when calling saveCompilation(Async)");
        }
        

        okhttp3.Call localVarCall = saveCompilationCall(newCompilationDto, _callback);
        return localVarCall;

    }

    /**
     * Добавление новой подборки
     * 
     * @param newCompilationDto данные новой подборки (required)
     * @return CompilationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Подборка добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public CompilationDto saveCompilation(NewCompilationDto newCompilationDto) throws ApiException {
        ApiResponse<CompilationDto> localVarResp = saveCompilationWithHttpInfo(newCompilationDto);
        return localVarResp.getData();
    }

    /**
     * Добавление новой подборки
     * 
     * @param newCompilationDto данные новой подборки (required)
     * @return ApiResponse&lt;CompilationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Подборка добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompilationDto> saveCompilationWithHttpInfo(NewCompilationDto newCompilationDto) throws ApiException {
        okhttp3.Call localVarCall = saveCompilationValidateBeforeCall(newCompilationDto, null);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление новой подборки (asynchronously)
     * 
     * @param newCompilationDto данные новой подборки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Подборка добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveCompilationAsync(NewCompilationDto newCompilationDto, final ApiCallback<CompilationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveCompilationValidateBeforeCall(newCompilationDto, _callback);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpin
     * @param compId id подборки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка откреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpinCall(Long compId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/compilations/{compId}/pin"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinValidateBeforeCall(Long compId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling unpin(Async)");
        }
        

        okhttp3.Call localVarCall = unpinCall(compId, _callback);
        return localVarCall;

    }

    /**
     * Открепить подборку на главной странице
     * 
     * @param compId id подборки (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка откреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public void unpin(Long compId) throws ApiException {
        unpinWithHttpInfo(compId);
    }

    /**
     * Открепить подборку на главной странице
     * 
     * @param compId id подборки (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка откреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unpinWithHttpInfo(Long compId) throws ApiException {
        okhttp3.Call localVarCall = unpinValidateBeforeCall(compId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Открепить подборку на главной странице (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка откреплена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpinAsync(Long compId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinValidateBeforeCall(compId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategory
     * @param categoryDto Данные категории для изменения (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные категории изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryCall(CategoryDto categoryDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = categoryDto;

        // create path and map variables
        String localVarPath = "/admin/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryValidateBeforeCall(CategoryDto categoryDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'categoryDto' is set
        if (categoryDto == null) {
            throw new ApiException("Missing the required parameter 'categoryDto' when calling updateCategory(Async)");
        }
        

        okhttp3.Call localVarCall = updateCategoryCall(categoryDto, _callback);
        return localVarCall;

    }

    /**
     * Изменение категории
     * Обратите внимание: имя категории должно быть уникальным
     * @param categoryDto Данные категории для изменения (required)
     * @return CategoryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные категории изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDto updateCategory(CategoryDto categoryDto) throws ApiException {
        ApiResponse<CategoryDto> localVarResp = updateCategoryWithHttpInfo(categoryDto);
        return localVarResp.getData();
    }

    /**
     * Изменение категории
     * Обратите внимание: имя категории должно быть уникальным
     * @param categoryDto Данные категории для изменения (required)
     * @return ApiResponse&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные категории изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDto> updateCategoryWithHttpInfo(CategoryDto categoryDto) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryDto, null);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение категории (asynchronously)
     * Обратите внимание: имя категории должно быть уникальным
     * @param categoryDto Данные категории для изменения (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные категории изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryAsync(CategoryDto categoryDto, final ApiCallback<CategoryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryValidateBeforeCall(categoryDto, _callback);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEvent
     * @param eventId id события (required)
     * @param adminUpdateEventRequest Данные для изменения информации о событии (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отредактировано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventCall(Long eventId, AdminUpdateEventRequest adminUpdateEventRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = adminUpdateEventRequest;

        // create path and map variables
        String localVarPath = "/admin/events/{eventId}"
            .replaceAll("\\{" + "eventId" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventValidateBeforeCall(Long eventId, AdminUpdateEventRequest adminUpdateEventRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling updateEvent(Async)");
        }
        
        // verify the required parameter 'adminUpdateEventRequest' is set
        if (adminUpdateEventRequest == null) {
            throw new ApiException("Missing the required parameter 'adminUpdateEventRequest' when calling updateEvent(Async)");
        }
        

        okhttp3.Call localVarCall = updateEventCall(eventId, adminUpdateEventRequest, _callback);
        return localVarCall;

    }

    /**
     * Редактирование события
     * Редактирование данных любого события администратором. Валидация данных не требуется.
     * @param eventId id события (required)
     * @param adminUpdateEventRequest Данные для изменения информации о событии (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отредактировано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto updateEvent(Long eventId, AdminUpdateEventRequest adminUpdateEventRequest) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = updateEventWithHttpInfo(eventId, adminUpdateEventRequest);
        return localVarResp.getData();
    }

    /**
     * Редактирование события
     * Редактирование данных любого события администратором. Валидация данных не требуется.
     * @param eventId id события (required)
     * @param adminUpdateEventRequest Данные для изменения информации о событии (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отредактировано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> updateEventWithHttpInfo(Long eventId, AdminUpdateEventRequest adminUpdateEventRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEventValidateBeforeCall(eventId, adminUpdateEventRequest, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Редактирование события (asynchronously)
     * Редактирование данных любого события администратором. Валидация данных не требуется.
     * @param eventId id события (required)
     * @param adminUpdateEventRequest Данные для изменения информации о событии (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие отредактировано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventAsync(Long eventId, AdminUpdateEventRequest adminUpdateEventRequest, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventValidateBeforeCall(eventId, adminUpdateEventRequest, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
