/*
 * Main service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.CategoryDto;
import org.openapitools.client.model.CompilationDto;
import org.openapitools.client.model.EventFullDto;
import org.openapitools.client.model.EventShortDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublicApi {
    private ApiClient localVarApiClient;

    public PublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCategories
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категории найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesCall(Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCategoriesCall(from, size, _callback);
        return localVarCall;

    }

    /**
     * Получение категорий
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @return List&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категории найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<CategoryDto> getCategories(Integer from, Integer size) throws ApiException {
        ApiResponse<List<CategoryDto>> localVarResp = getCategoriesWithHttpInfo(from, size);
        return localVarResp.getData();
    }

    /**
     * Получение категорий
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CategoryDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категории найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategoryDto>> getCategoriesWithHttpInfo(Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(from, size, null);
        Type localVarReturnType = new TypeToken<List<CategoryDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение категорий (asynchronously)
     * 
     * @param from количество категорий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество категорий в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категории найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoriesAsync(Integer from, Integer size, final ApiCallback<List<CategoryDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(from, size, _callback);
        Type localVarReturnType = new TypeToken<List<CategoryDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategory
     * @param catId id категории (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryCall(Long catId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{catId}"
            .replaceAll("\\{" + "catId" + "\\}", localVarApiClient.escapeString(catId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryValidateBeforeCall(Long catId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'catId' is set
        if (catId == null) {
            throw new ApiException("Missing the required parameter 'catId' when calling getCategory(Async)");
        }
        

        okhttp3.Call localVarCall = getCategoryCall(catId, _callback);
        return localVarCall;

    }

    /**
     * Получение информации о категории по её идентификатору
     * 
     * @param catId id категории (required)
     * @return CategoryDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDto getCategory(Long catId) throws ApiException {
        ApiResponse<CategoryDto> localVarResp = getCategoryWithHttpInfo(catId);
        return localVarResp.getData();
    }

    /**
     * Получение информации о категории по её идентификатору
     * 
     * @param catId id категории (required)
     * @return ApiResponse&lt;CategoryDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDto> getCategoryWithHttpInfo(Long catId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(catId, null);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение информации о категории по её идентификатору (asynchronously)
     * 
     * @param catId id категории (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Категория найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryAsync(Long catId, final ApiCallback<CategoryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(catId, _callback);
        Type localVarReturnType = new TypeToken<CategoryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompilation
     * @param compId id подборки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка событий найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompilationCall(Long compId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compilations/{compId}"
            .replaceAll("\\{" + "compId" + "\\}", localVarApiClient.escapeString(compId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompilationValidateBeforeCall(Long compId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'compId' is set
        if (compId == null) {
            throw new ApiException("Missing the required parameter 'compId' when calling getCompilation(Async)");
        }
        

        okhttp3.Call localVarCall = getCompilationCall(compId, _callback);
        return localVarCall;

    }

    /**
     * Получение подборки событий по его id
     * 
     * @param compId id подборки (required)
     * @return CompilationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка событий найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public CompilationDto getCompilation(Long compId) throws ApiException {
        ApiResponse<CompilationDto> localVarResp = getCompilationWithHttpInfo(compId);
        return localVarResp.getData();
    }

    /**
     * Получение подборки событий по его id
     * 
     * @param compId id подборки (required)
     * @return ApiResponse&lt;CompilationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка событий найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompilationDto> getCompilationWithHttpInfo(Long compId) throws ApiException {
        okhttp3.Call localVarCall = getCompilationValidateBeforeCall(compId, null);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение подборки событий по его id (asynchronously)
     * 
     * @param compId id подборки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подборка событий найдена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompilationAsync(Long compId, final ApiCallback<CompilationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompilationValidateBeforeCall(compId, _callback);
        Type localVarReturnType = new TypeToken<CompilationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompilations
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены подборки событий </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompilationsCall(Boolean pinned, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/compilations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pinned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pinned", pinned));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompilationsValidateBeforeCall(Boolean pinned, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCompilationsCall(pinned, from, size, _callback);
        return localVarCall;

    }

    /**
     * Получение подборок событий
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return List&lt;CompilationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены подборки событий </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<CompilationDto> getCompilations(Boolean pinned, Integer from, Integer size) throws ApiException {
        ApiResponse<List<CompilationDto>> localVarResp = getCompilationsWithHttpInfo(pinned, from, size);
        return localVarResp.getData();
    }

    /**
     * Получение подборок событий
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;CompilationDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены подборки событий </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompilationDto>> getCompilationsWithHttpInfo(Boolean pinned, Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getCompilationsValidateBeforeCall(pinned, from, size, null);
        Type localVarReturnType = new TypeToken<List<CompilationDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение подборок событий (asynchronously)
     * 
     * @param pinned искать только закрепленные/не закрепленные подборки (optional)
     * @param from количество элементов, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество элементов в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найдены подборки событий </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompilationsAsync(Boolean pinned, Integer from, Integer size, final ApiCallback<List<CompilationDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompilationsValidateBeforeCall(pinned, from, size, _callback);
        Type localVarReturnType = new TypeToken<List<CompilationDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvent1
     * @param id id события (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvent1Call(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvent1ValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEvent1(Async)");
        }
        

        okhttp3.Call localVarCall = getEvent1Call(id, _callback);
        return localVarCall;

    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @return EventFullDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public EventFullDto getEvent1(Long id) throws ApiException {
        ApiResponse<EventFullDto> localVarResp = getEvent1WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @return ApiResponse&lt;EventFullDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventFullDto> getEvent1WithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getEvent1ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение подробной информации об опубликованном событии по его идентификатору (asynchronously)
     * Обратите внимание: - событие должно быть опубликовано - информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param id id события (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Событие найдено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvent1Async(Long id, final ApiCallback<EventFullDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvent1ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EventFullDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents1
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvents1Call(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (categories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "categories", categories));
        }

        if (paid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paid", paid));
        }

        if (rangeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeStart", rangeStart));
        }

        if (rangeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rangeEnd", rangeEnd));
        }

        if (onlyAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyAvailable", onlyAvailable));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvents1ValidateBeforeCall(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getEvents1Call(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, _callback);
        return localVarCall;

    }

    /**
     * Получение событий с возможностью фильтрации
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return List&lt;EventShortDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public List<EventShortDto> getEvents1(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size) throws ApiException {
        ApiResponse<List<EventShortDto>> localVarResp = getEvents1WithHttpInfo(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size);
        return localVarResp.getData();
    }

    /**
     * Получение событий с возможностью фильтрации
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @return ApiResponse&lt;List&lt;EventShortDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EventShortDto>> getEvents1WithHttpInfo(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getEvents1ValidateBeforeCall(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, null);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение событий с возможностью фильтрации (asynchronously)
     * Обратите внимание:  - это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события - текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв - если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени - информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие - информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики
     * @param text текст для поиска в содержимом аннотации и подробном описании события (optional)
     * @param categories список идентификаторов категорий в которых будет вестись поиск (optional)
     * @param paid поиск только платных/бесплатных событий (optional)
     * @param rangeStart дата и время не раньше которых должно произойти событие (optional)
     * @param rangeEnd дата и время не позже которых должно произойти событие (optional)
     * @param onlyAvailable только события у которых не исчерпан лимит запросов на участие (optional, default to false)
     * @param sort Вариант сортировки: по дате события или по количеству просмотров (optional)
     * @param from количество событий, которые нужно пропустить для формирования текущего набора (optional, default to 0)
     * @param size количество событий в наборе (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> События найдены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос составлен с ошибкой </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Не выполнены условия для совершения операции </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Объект не найден </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Запрос приводит к нарушению целостности данных </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEvents1Async(String text, List<Long> categories, Boolean paid, String rangeStart, String rangeEnd, Boolean onlyAvailable, String sort, Integer from, Integer size, final ApiCallback<List<EventShortDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvents1ValidateBeforeCall(text, categories, paid, rangeStart, rangeEnd, onlyAvailable, sort, from, size, _callback);
        Type localVarReturnType = new TypeToken<List<EventShortDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
